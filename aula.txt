]<<<<<<< HEAD
=======
Criando repositórios 

* Para criar repositórios utilizamos o comando: git init

* dessa maneira o git vai criar os arquivos necessários para inicializá-lo;

*Desta maneira o git vai criar os arquivo

*Que estão na pasta oculta .git;

*Após este comando o diretório atual será reconhecimento pelo git como um projeto e respondesrá aos seus demais comandos

//AULA 02

*Podemos facilmente enviar nossos repos para o GitHub;

*Precisamos criar o projeto no GitHub, inicializar o mesmo no git em nossa máquina, sincronizar com o GH e enviar;

*Entra no gitHub, cria um rebositório, coloca os seguintes comandos:

git init
git add <nome do arquivo(read-me)>
git commit -m "primeira commit" (necessário para dar o primeiro push e se conectar git com guthub)
git branch -M main (vai criar a linha do tempo principal)
git remote add origin <link> (vai conectar git com github)
git push -u origin main (vai conectar a branch main com a origem (repositório no github))

após isso basta usar o git push normal para enviar as novas commits

// comandos aprendidos para resolver o problema 

git log --oneline (mostra o histórico dos commits)
git rebase (edita os commits)

git rebase -i HEAD~2 (vai mostrar os ultimos dois commits do histórico) (edita
ou dropa a commit que desejar)

git rebase --amend (vai salvar, seja editar ou dropar)
git rebase --amend --no-edit (salva ou dropa sem editar nada)
git rebase --continue (finaliza o processo)
git rebase --abort (aborta o processo)
git rebase --skip (acho que ignore)

git push --force (força o envio)

git commit -a //envia commits de vários arquivos 
git add .  //adiciona vários arquivos

git commit -a -m "texto"

git pull //atualiza o repositório

//situação

ao tentar dar push no arquivo do github sem atualizar os novos commits feito por outro dev
ocorreu um erro, onde me forçou primeiramente a fazer essa atualização com o pull, e só depois
continuar, porém o pull normal não funcionou, o que funcionou foi:

git pull --rebase //esse aqui funcinou normalmente

//aulas 3

git clone <link> //clona o repositório do git

git rm <nome do arquivo> //remove o arquivo do projeto

git add <nome do arquivo> //adiciona um arquivo específico
git add . //adiciona todos os arquivos novos
git add * //adiciona todos os arquivos novos menos os ocultos
git add -A //Adiciona tudo, inclusive remoções de arquivos


//aula como descartar modificações

git checkout <nome do arquivo> 

esse comando ele reseta o arquivo (antes da modificação)

git reset (serve para resetar a branch)

.gitignore (tudo o que colocar dentro desse arquivo será ignorado pelo git)


// nova secção

novo tópico : branch

Branch são versões diferentes do código (linha do tempo paralela)

git branch (lista todas as branchs disponiveis)
git branch <nome_da_branch> cria uma branch
git branch -d <nome> //deleta a branch
git branch -delete <nome> //deleta a branch

git checkout <nome da branch> vai para a branch que deseja
git checkout -b <nome da branch> vai para branch que deseja e caso nao exista, cria uma nova

obs: atenção, cuidado ao sair de uma branch e ir para outra sem antes dar 
o commit em todas as alterações da branch atual. O branch leva os não-commits
para a branch posterior, o que pode gerar confusão futuramente.

//aula 02

para mesclar uma branch paralela com a master, basta usar o comando:
git merge <nome da branch> dentro da branch que deseja mesclar, por exemplo,
se estivermos na branch master, ao usar git branch <nome da branch> 
É possivel mesclar duas branches paralelas independentes da master, caso 
a branch do joao seja aprovada, e a branch do elvis está em desenvolvimento,
o elvis pode mesclear a branch dele com a do João, para então já continuar 
o desenvolvimento. Caso a do joão já tenha sido enviado para a main, basta
o elvis meclar o main com a branch dele, assim ele vai meio que atualizar 
a branch dele com as novas funcionalidades da main, mas antes tem que dar um 
pull na master obviamente.


// aula 03 -- stash

git stash ( ele joga tudo no lixo e volta ao estado original)

git stach list (lista todas as stashs criadas)

git stach apply <numero> (vai recuperar a stash)

git stash drop <numero> (exclui a stash especifica)

git stash clear (exclui todas as stashs)

//aula 04 -- tags

git tag (lista as tags)

git tag -a <nome> -m "<msg>"

tag serve como um checkpoint de um branch

git show <nome>

git checkout <nome> (mudar entre as tags)


git push origin <nome da tag> (enviar a tag para o repositório)

git push origin --tags (envia todas as tags)


//salvar o nome da pessoa no projeto

git config --global user.name "Seu nome"
git config --global user.email "seu@email"

git config user.name "seu nome" //para alvar apenas neste projeto
git config user.email "email"
